buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"  // QueryDsl plugin
	id 'java'
	// id "org.flywaydb.flyway" version "9.8.1"
}

group = 'com.techeeresc.tab'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'   // gradle 5 이상부터는 이처럼 설정해주어야한다.
	testAnnotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// implementation 'org.springframework.boot:spring-boot-starter-security'

	// QueryDSL dependencies
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

	// flyway library dependency
	// baseline-on-migrate: true를 설정한 경우 의존성을 제거한다.
	// implementation 'org.flywaydb:flyway-core'
	// implementation 'org.flywaydb:flyway-mysql'
}

tasks.named('test') {
	useJUnitPlatform()
}

// script for querydsl
def querydslDir = "$buildDir/generated/querydsl"   // path for using at QueryDsl
querydsl {   // QueryDsl Setting
	jpa = true   // using JPA
	querydslSourcesDir = querydslDir  // using path
}

sourceSets {  //sourceset for build
	main.java.srcDir querydslDir
}

configurations {   // compileClassPath extends
	// querydsl.extendsFrom complieClasspath
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {   // option for compile
	options.annotationProcessorPath = configurations.querydsl
}